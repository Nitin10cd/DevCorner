// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String       @unique
  password      String?
  role          Role         @default(USER)
  image         String?
  emailVerified DateTime?
  bio           String?      @default("Hello I am a passionate dev")
  location      String?      @default("Delhi")
  github        String?      @default("")
  linkedin      String?      @default("")
  website       String?      @default("")
  accounts      Account[]
  sessions      Session[]
  skills        Skill[]
  projects      Project[]
  blogs         Blog[]
  education     Education[]
  experience    Experience[]
  jobs          Job[]        @relation("RecruiterJobs")
  posts         Post[]       
  comments      Comment[]    
  supports      Support[]
}

model Skill {
  id     String @id @default(cuid())
  name   String
  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model Project {
  id       String   @id @default(cuid())
  title    String
  repoUrl  String
  techTags String[]
  userId   String
  user     User     @relation(fields: [userId], references: [id])
}

model Blog {
  id        String     @id @default(cuid())
  title     String
  content   String
  tags      String[]
  slug      String     @unique
  createdAt DateTime   @default(now())

  user      User       @relation(fields: [userId], references: [id])
  userId    String

  comments  Comment[]
  supports  Support[]
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())

  // Common relation to user
  user      User     @relation(fields: [userId], references: [id])
  userId    String

  // Polymorphic: Only one of these will be non-null
  blog      Blog?    @relation(fields: [blogId], references: [id])
  blogId    String?

  post      Post?    @relation(fields: [postId], references: [id])
  postId    String?
}

model Post {
  id        String     @id @default(cuid())
  content   String
  image     String?
  createdAt DateTime   @default(now())

  user      User       @relation(fields: [userId], references: [id])
  userId    String

  comments  Comment[]
  supports  Support[]
}


model Support {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])
  userId    String

  blog      Blog?    @relation(fields: [blogId], references: [id])
  blogId    String?

  post      Post?    @relation(fields: [postId], references: [id])
  postId    String?

  @@unique([userId, blogId])
  @@unique([userId, postId])
}


model Education {
  id          String   @id @default(cuid())
  institution String
  course      String
  startdate   String
  enddate     String
  activity    String[]
  userId      String
  user        User     @relation(fields: [userId], references: [id])
}

model Experience {
  id           String   @id @default(cuid())
  orgnaisation String
  startdate    String
  enddate      String
  role         String
  activity     String[]
  userId       String
  user         User     @relation(fields: [userId], references: [id])
}


model Job {
  id          String   @id @default(cuid())
  title       String
  description String
  techStack   String[]
  recruiterId String
  recruiter   User     @relation("RecruiterJobs", fields: [recruiterId], references: [id])
}

enum Role {
  USER
  RECRUITER
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
